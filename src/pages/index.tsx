import type { NextPage } from "next";
import Head from "next/head";
import { ReactNode, useEffect, useRef, useState } from "react";

import {
  FiChevronDown,
  FiMessageSquare,
  FiMicOff,
  FiMonitor,
  FiPhoneOff,
  FiSliders,
  FiTrash,
  FiUser,
  FiUsers,
  FiVideoOff,
} from "react-icons/fi";
import { twMerge } from "tailwind-merge";
import { getBestLayout } from "../get-best-layout";
import { useRandomUsers } from "../use-random-users";

const Home: NextPage = () => {
  const { users, removeUser, addUser } = useRandomUsers(5);
  const [size, setSize] = useState({ width: 0, height: 0 });
  const [debugMode, setDebugMode] = useState(false);
  const videoContainer = useRef<HTMLDivElement>(null);

  const toggleDebugMode = () => setDebugMode(!debugMode);

  const [layout, widthPercentage] = getBestLayout(
    users.length,
    size.width / size.height
  );

  useEffect(() => {
    const observer = new ResizeObserver(([entry]) => {
      setSize({
        height: entry?.contentRect.height || 1,
        width: entry?.contentRect.width || 1,
      });
    });

    if (videoContainer.current) observer.observe(videoContainer.current);

    return () => observer.disconnect();
  }, []);

  return (
    <>
      <Head>
        <title>Pong.gg</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex h-screen w-screen flex-col bg-transparent">
        <div
          className="flex w-full flex-grow flex-col items-center justify-center"
          ref={videoContainer}
          style={{ border: debugMode ? "1px solid red" : "none" }}
        >
          {layout && widthPercentage && (
            <div
              className="absolute flex flex-wrap items-center justify-center"
              style={{ width: widthPercentage * size.width * layout.cols }}
            >
              {users.map((user) => (
                <Video
                  onClick={() => removeUser(user.name)}
                  user={user}
                  key={user.name}
                  style={{
                    width: (widthPercentage ?? 0.5) * size.width,
                    border: debugMode ? "1px solid green" : "none",
                  }}
                />
              ))}
            </div>
          )}
        </div>
        <Navbar addUser={addUser} toggleDebugMode={toggleDebugMode} />
      </main>
      {/*  eslint-disable-next-line @next/next/no-img-element */}
      <img
        src="/black-texture-alt.jpeg"
        alt="background"
        className="absolute inset-0 h-screen w-screen object-cover"
        style={{ filter: "brightness(1.25)", zIndex: -1 }}
      />
    </>
  );
};

const Video = ({
  style,
  user,
  onClick,
}: {
  style?: { [key: string]: number | string };
  user: { name: string };
  onClick: () => void;
}) => {
  return (
    <div style={style} className="aspect-video p-2">
      <div className="relative flex h-full w-full items-center justify-center rounded-md bg-black">
        <FiMicOff className="absolute top-4 left-4 h-4 w-4 text-gray-300" />
        <div className="flex h-16 w-16 items-end justify-center overflow-hidden rounded-full bg-gray-600">
          <FiUser className="h-14 w-14 text-gray-300" />
        </div>
        <span className="absolute bottom-4 left-3 h-4 w-4 text-gray-300">
          {user.name}
        </span>
        <BaseButton
          onClick={onClick}
          className="absolute bottom-2 right-3 p-1 text-sm"
        >
          <FiTrash />
        </BaseButton>
      </div>
    </div>
  );
};

const Navbar = ({
  addUser,
  toggleDebugMode,
}: {
  addUser: () => void;
  toggleDebugMode: () => void;
}) => {
  return (
    <nav className="grid grid-cols-1 items-center justify-items-center gap-4 py-2 px-4 sm:grid-cols-2 md:grid-cols-3">
      <div className=" col-span-1 flex items-center gap-6 px-2 font-semibold text-gray-300 sm:col-span-2 md:col-span-1 md:justify-self-start">
        <span>Pong.gg</span>
        <BaseButton onClick={addUser} className="flex gap-2 py-1 px-2 text-sm">
          Add User
        </BaseButton>
      </div>
      <div className="flex gap-2">
        <div className="flex flex-nowrap">
          <BaseButton className="rounded-r-none">
            <FiMicOff />
          </BaseButton>
          <BaseButton className="rounded-l-none border-l-0">
            <FiChevronDown />
          </BaseButton>
        </div>
        <div className="flex flex-nowrap">
          <BaseButton className="rounded-r-none">
            <FiVideoOff />
          </BaseButton>
          <BaseButton className="rounded-l-none border-l-0">
            <FiChevronDown />
          </BaseButton>
        </div>
        <BaseButton>
          <FiMonitor />
        </BaseButton>
        <BaseButton className="border-red-600 bg-red-600 hover:border-red-700 hover:bg-red-700">
          <FiPhoneOff />
        </BaseButton>
      </div>
      <div className="flex gap-2 md:justify-self-end ">
        <BaseButton>
          <FiUsers />
        </BaseButton>
        <BaseButton>
          <FiMessageSquare />
        </BaseButton>
        <BaseButton
          onClick={toggleDebugMode}
          className="tet flex gap-2 border-yellow-600 bg-yellow-600 text-sm hover:border-yellow-700 hover:bg-yellow-700"
        >
          <FiSliders />
          Toggle Hitboxes
        </BaseButton>
      </div>
    </nav>
  );
};

const BaseButton = ({
  className,
  children,
  onClick,
}: {
  className?: string;
  children: ReactNode;
  onClick?: () => void;
}) => {
  return (
    <button
      onClick={onClick}
      className={twMerge(
        "relative inline-flex items-center rounded-md border border-gray-700 bg-gray-800 px-3 py-3 text-base font-medium text-white shadow-sm hover:bg-gray-700 hover:text-gray-100",
        className
      )}
    >
      {children}
    </button>
  );
};

export default Home;
